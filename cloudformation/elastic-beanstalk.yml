# aws cloudformation create-stack --stack-name SakanuApp --template-body file://./cloudformation/elastic-beanstalk.yml --parameters ParameterKey=CidrIp,ParameterValue=your-cidr-ip
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for setting up a security group
Parameters:
  CidrIp:
    Description: The IP range in CIDR notation
    Type: String
    Default: 0.0.0.0/0
  ApiDomain:
    Description: The domain name for the API
    Type: String
  SakanuDatabasePassword:
    Description: The password for the database
    Type: String
    NoEcho: true

Resources:
  SakanuVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Project
          Value: Sakanu

  SakanuInternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  SakanuVPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref SakanuVPC
      InternetGatewayId: !Ref SakanuInternetGateway

  SakanuRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref SakanuVPC
      Tags:
        - Key: Project
          Value: Sakanu

  SakanuInternetGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref SakanuRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref SakanuInternetGateway

  SakanuSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref SakanuVPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: 'ca-central-1b'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: Sakanu

  SakanuSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref SakanuVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: 'ca-central-1a'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: Sakanu

  SakanuUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: SakanuUser
      Tags:
        - Key: Project
          Value: Sakanu

  SakanuElasticBeanstalkPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: SakanuElasticBeanstalkPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'elasticbeanstalk:*'
              - 's3:*'
              - 'ec2:*'
              - 'autoscaling:*'
              - 'elasticloadbalancing:*'
              - 'cloudformation:*'
              - 'sns:*'
              - 'cloudwatch:*'
              - 'logs:*'
              - 'sqs:*'
              - 'iam:PassRole'
            Resource: '*'
      Users:
        - !Ref SakanuUser

  SakanuS3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: SakanuS3Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource: 'arn:aws:s3:::sakanu-api/*'
      Users:
        - !Ref SakanuUser

  SakanuElasticBeanstalkAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref SakanuUser

  SakanuInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker'
        - 'arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService'
        - 'arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth'
      Tags:
        - Key: Project
          Value: Sakanu

  SakanuDeployBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: sakanu-api
      Tags:
        - Key: Project
          Value: Sakanu

  SakanuDeployBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref SakanuDeployBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSakanuUser
            Effect: Allow
            Principal:
              AWS: !GetAtt SakanuUser.Arn
            Action: 's3:PutObject'
            Resource: !Sub 'arn:aws:s3:::${SakanuDeployBucket}/*'

  SakanuInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
        - !Ref SakanuInstanceRole

  SakanuSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for Sakanu
      VpcId: !Ref SakanuVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref CidrIp  # Allows SSH access from the specified IP range
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Project
          Value: Sakanu

  SakanuCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref ApiDomain
      ValidationMethod: 'DNS'

  SakanuApp:
    Type: 'AWS::ElasticBeanstalk::Application'
    Properties:
      ApplicationName: sakanu-api

  SakanuEnvironment:
    Type: 'AWS::ElasticBeanstalk::Environment'
    Properties:
      ApplicationName: !Ref SakanuApp
      EnvironmentName: sakanu-api-prod
      SolutionStackName: 64bit Amazon Linux 2023 v4.2.1 running Corretto 21
      OptionSettings:
        - Namespace: 'aws:elasticbeanstalk:cloudwatch:logs'
          OptionName: 'StreamLogs'
          Value: 'true'
        - Namespace: 'aws:elasticbeanstalk:cloudwatch:logs'
          OptionName: 'DeleteOnTerminate'
          Value: 'false'
        - Namespace: 'aws:elasticbeanstalk:cloudwatch:logs'
          OptionName: 'RetentionInDays'
          Value: '7'
        - Namespace: 'aws:elasticbeanstalk:environment'
          OptionName: 'EnvironmentType'
          Value: 'LoadBalanced'
        - Namespace: 'aws:elb:listener:80'
          OptionName: 'ListenerEnabled'
          Value: 'true'
        - Namespace: 'aws:elb:listener:443'
          OptionName: 'ListenerEnabled'
          Value: 'true'
        - Namespace: 'aws:elb:listener:443'
          OptionName: 'ListenerProtocol'
          Value: 'HTTPS'
        - Namespace: 'aws:elb:listener:443'
          OptionName: 'InstancePort'
          Value: '80'
        - Namespace: 'aws:elb:listener:443'
          OptionName: 'InstanceProtocol'
          Value: 'HTTP'
        - Namespace: 'aws:elb:listener:443'
          OptionName: 'SSLCertificateId'
          Value: !Ref SakanuCertificate
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: 'InstanceType'
          Value: 't2.micro'
        - Namespace: 'aws:ec2:vpc'
          OptionName: 'VPCId'
          Value: !Ref SakanuVPC
        - Namespace: 'aws:ec2:vpc'
          OptionName: 'Subnets'
          Value: !Ref SakanuSubnet1
        - Namespace: 'aws:ec2:vpc'
          OptionName: 'AssociatePublicIpAddress'
          Value: 'true'
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: 'SecurityGroups'
          Value: !Ref SakanuSecurityGroup
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: 'IamInstanceProfile'
          Value: !Ref SakanuInstanceProfile
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: 'EC2KeyName'
          Value: 'sakanu-local'
        - Namespace: 'aws:elasticbeanstalk:environment:process:default'
          OptionName: 'HealthCheckPath'
          Value: '/actuator/health'
      Tags:
        - Key: Project
          Value: Sakanu

  SakanuDatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for Sakanu Database
      VpcId: !Ref SakanuVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt SakanuSecurityGroup.GroupId
      Tags:
        - Key: Project
          Value: Sakanu

  SakanuDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet group for Sakanu Database
      SubnetIds:
        - !Ref SakanuSubnet1
        - !Ref SakanuSubnet2
      Tags:
        - Key: Project
          Value: Sakanu

  SakanuDatabase:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: sakanu
      Engine: mysql
      EngineVersion: 8.0.35
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 10
      MasterUsername: sakanu
      MasterUserPassword: !Ref SakanuDatabasePassword
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !GetAtt SakanuDatabaseSecurityGroup.GroupId
      DBSubnetGroupName: !Ref SakanuDBSubnetGroup
      Tags:
        - Key: Project
          Value: Sakanu